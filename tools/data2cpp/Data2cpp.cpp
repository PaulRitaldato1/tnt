#include <iostream>
#include <algorithm>
#include "Data2cpp.hpp"

#define debug if (1)
#define nodebug else

void data2cpp::open(std::string_view yamlFile)
{
    name = yamlFile;
    data = YAML::LoadFile(yamlFile.data());
    debug std::cout << "Loaded YAML file " << yamlFile << std::flush;

    std::ofstream yf{yamlFile.data()};

    auto datav2{""s};
    

    base = yamlFile.substr(0, yamlFile.size() - 5);

    h = "..\\";
    h += base;
    h += ".hpp";
    c = "..\\";
    c = base;
    c += ".cpp";

    debug std::cout << "\t" << h << "\t" << c << std::endl
                    << "";

    hpp.open(h);
    cpp.open(c);

    if (hpp.is_open() && cpp.is_open())
        debug std::cout << "Files are supposed to be opened." << std::endl;
}

void data2cpp::close()
{
    if (hpp.is_open())
        debug std::cout << "Closing " << h << std::endl;
    hpp.close();
    if (cpp.is_open())
        debug std::cout << "Closing " << c << std::endl;
    cpp.close();
    debug std::cout << "Files are supposed to be closed." << std::endl;
    data.reset();
}

void data2cpp::writeHComment(std::string_view text)
{
    hpp << "// " << text;
}

void data2cpp::writeCComment(std::string_view text)
{
    cpp << "// " << text;
}

void data2cpp::writeBGuard()
{
    hpp << std::endl
        << "#ifndef " << base << "_hpp"
        << std::endl
        << "#define " << base << "_hpp";
}

void data2cpp::writeEGuard()
{
    hpp << std::endl
        << "#endif //!" << base << "_hpp";
}

void data2cpp::writeHIncludes()
{
    for (YAML::const_iterator it{data["include"].begin()}; it != data["include"].end(); ++it)
        hpp << std::endl
            << "#include \"" << it->second.as<std::string>() << "\"";
}

void data2cpp::writeCIncludes()
{
    cpp << std::endl
        << "#include \"" << h << "\"";
}

void data2cpp::write()
{
    writeHComment("file autogenerated by the TnT engine's tool data2code\n");
    writeBGuard();

    writeHIncludes();

    writeEGuard();

    hpp << std::flush;

    writeCComment("file autogenerated by the TnT engine's tool data2code\n");
    writeCIncludes();

    cpp << std::flush;
}

int main()
{
    data2cpp test;
    test.open("test.yaml");
    test.close();

    return 0;
}
